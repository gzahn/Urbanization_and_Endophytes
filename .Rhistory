taxa_x <-
ps_x %>%
# merge_samples("location",fun = "sum") %>%
subset_taxa(taxa_sums(ps_x) > 0) %>%
taxa_names() %>%
as.data.frame()
names(taxa_x) <- as.character(i)
df <- taxa_x %>% table %>% data.frame()
names(df) <- c("ASV","Freq")
df$Location <- as.character(i)
taxa_list[[i]] <- df
}
# build data frame from results
names(taxa_list) <- as.character(1:10)
df <- taxa_list[] %>%
purrr::reduce(full_join)
# subset to non-duplicated taxa
df[!(df$ASV %>% duplicated()),] %>%
group_by(Location) %>%
summarize(rare_count=sum(Freq)) %>%
mutate(Location=as.numeric(Location) %>% factor(levels=as.character(c(1,2,3,4,5,6,9,10,7,8)))) %>%
arrange(Location) %>%
ggplot(aes(x=Location,y=rare_count)) +
geom_col(fill="#4d6059") +
labs(y="N unique taxa",
title = "Number of unique taxa in each location",
x="Downstream position") +
scale_x_discrete(labels=as.character(1:10)) +
geom_vline(xintercept = 5.5,linetype=2,color='red') +
annotate('text',label="Edge of 'urban zone'",x=7,y=75) +
theme_bw()
ggsave("./output/figs/N_unique_taxa_at_each_location.png", width = 8, height = 4,dpi=300)
# taxonomy of taxa unique to only one location
unique_asvs <- df[!(df$ASV %>% duplicated()),"ASV"] %>% as.character()
unique_asvs_taxonomy <-
ps %>%
subset_taxa(taxa_names(ps) %in% unique_asvs) %>%
tax_table()
x <-
data.frame(unique_asvs_taxonomy) %>%
dplyr::filter(!is.na(Genus)) %>%
pluck("Genus") %>%
str_remove("g__") %>%
table() %>%
data.frame() %>%
arrange((Freq))
names(x) <- c("Genus","Freq")
x %>%
dplyr::filter(Freq > 1) %>%
mutate(Genus=factor(Genus,levels=x$Genus)) %>%
ggplot(aes(y=Genus,x=Freq)) +
geom_col() +
theme_bw()
ps_comp <- microbiome::transform(ps, "compositional")
# With compositional (relative) abundances
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
plot_core(ps_comp,
prevalences = prevalences,
detections = det,
plot.type = "lineplot") +
xlab("Relative Abundance (%)")
core_taxa <- core_members(ps_comp, detection = 0, prevalence = 2/3) %>% otu_to_taxonomy(data=ps_comp)
core_taxa
data.frame(CoreTaxa=core_taxa %>%
str_remove_all(".__") %>%
str_remove("Fungi_")) %>%
kableExtra::kable() %>%
kableExtra::kable_classic()
# Beta diversity ####
# quick ordination
set.seed(666)
ord <- ordinate(ps_comp,method = "NMDS")
plot_ordination(ps_comp,ord,color = "location") +
scale_color_viridis_c(end=.9,option = "B") +
theme_minimal()
ps_comp
ps_comp@sam_data
?geom_label(aes(v))
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.75)
meta$location
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.05)
meta$location2
meta$location == 9
meta[meta$location == 9,]
meta[meta$location > 9,]
meta[meta$location >= 9,]
ggmap::ggmap(area) +
geom_point(data=meta[meta$location >= 9,],aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta[meta$location >= 9,],aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.05)
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.05)
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.75)
# FunGuild analysis ####
db <- fungaltraits::fungal_traits()
db
guilds <-
funguild_assign(data.frame(Taxonomy=paste(ps@tax_table[,1],
ps@tax_table[,2],
ps@tax_table[,3],
ps@tax_table[,4],
ps@tax_table[,5],
ps@tax_table[,6],
ps@tax_table[,7],
sep=",")
))
guilds
guilds$guild
# add guild assignments to "pseudo-tax_table"
# (this replaces and renames the "Kingdom" column)
ps@tax_table[,1] <- guilds$guild
attributes(fung@tax_table)$dimnames[[2]][1] <- "Guild"
attributes(ps@tax_table)$dimnames[[2]][1] <- "Guild"
ps@tax_table
ps@tax_table[,1] %>% unique
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal",(fung_ra@tax_table[,1]),value = TRUE) %>%
unique()
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal",(ps@tax_table[,1]),value = TRUE) %>%
unique()
mutualist_guilds
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal\\|[E,e]ndophyte",(ps@tax_table[,1]),value = TRUE) %>%
unique()
mutualist_guilds
grep("[M,m]ycorrhizal\\|[E,e]ndophyte",(ps@tax_table[,1]),value = TRUE)
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal|[E,e]ndophyte",(ps@tax_table[,1]),value = TRUE) %>%
unique()
mutualist_guilds
# identify "saprotrophs"
saprotroph_guilds <-
grep("[S,s]aprotroph",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
# identify "pathogens"
pathogen_guilds <-
grep("[P,p]athogen|[P,p]arasite",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal|[E,e]ndophyte",(ps@tax_table[,1]),value = TRUE) %>%
unique()
# identify "saprotrophs"
saprotroph_guilds <-
grep("[S,s]aprotroph",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
# identify "pathogens"
pathogen_guilds <-
grep("[P,p]athogen|[P,p]arasite",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
pathogen_guilds
mutualist_proportions <-
ps %>%
subset_taxa(Guild %in% mutualist_guilds) %>%
sample_sums()
# build data frame for modeling
mutualism_df <-
microbiome::meta(ps) %>%
mutate(proportion_mutualist = mutualist_proportions)
saprotroph_proportions <-
ps %>%
subset_taxa(Guild %in% saprotroph_guilds) %>%
sample_sums()
# build data frame for modeling
saprotroph_df <-
microbiome::meta(ps) %>%
mutate(proportion_saprotroph = saprotroph_proportions)
saprotroph_df
# just using "mycorrhizal" as the keyword...
mutualist_guilds <-
grep("[M,m]ycorrhizal|[E,e]ndophyte",(ps@tax_table[,1]),value = TRUE) %>%
unique()
# identify "saprotrophs"
saprotroph_guilds <-
grep("[S,s]aprotroph",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
# identify "pathogens"
pathogen_guilds <-
grep("[P,p]athogen|[P,p]arasite",(ps@tax_table[,1]),value = TRUE) %>%
grep(pattern="[M,m]ycorrhizal",x=.,value = TRUE, invert = TRUE) %>%
unique()
# subset taxa to only mutualists; get row sums; this will be proportion of mutualists
# in each sample
mutualist_proportions <-
ps %>% transform_sample_counts(function(x){x/sum(x)}) %>%
subset_taxa(Guild %in% mutualist_guilds) %>%
sample_sums()
# build data frame for modeling
mutualism_df <-
microbiome::meta(ps) %>%
mutate(proportion_mutualist = mutualist_proportions)
# subset taxa to only saprotrophs; get row sums; this will be proportion of mutualists
# in each sample
saprotroph_proportions <-
ps %>% transform_sample_counts(function(x){x/sum(x)}) %>%
subset_taxa(Guild %in% saprotroph_guilds) %>%
sample_sums()
# build data frame for modeling
saprotroph_df <-
microbiome::meta(ps) %>%
mutate(proportion_saprotroph = saprotroph_proportions)
# subset taxa to only pathogens; get row sums; this will be proportion of mutualists
# in each sample
pathogen_proportions <-
ps %>% transform_sample_counts(function(x){x/sum(x)}) %>%
subset_taxa(Guild %in% pathogen_guilds) %>%
sample_sums()
# build data frame for modeling
pathogen_df <-
microbiome::meta(ps) %>%
mutate(proportion_pathogen = pathogen_proportions)
pathogen_df
full_join(pathogen_df,mutualism_df) %>%
full_join(saprotroph_df)
guild_df <-
full_join(pathogen_df,mutualism_df) %>%
full_join(saprotroph_df)
## Model guild proportions ####
guild_model <- glm(data=guild_df,
formula = proportion_pathogen ~ lat)
summary(guild_model)
## Model guild proportions ####
guild_model <- glm(data=guild_df,
formula = proportion_pathogen ~ location)
summary(guild_model)
## Model guild proportions ####
guild_model <- glm(data=guild_df %>% mutate(urban = case_when(location > 5 ~ TRUE, TRUE ~ FALSE)),
formula = proportion_pathogen ~ urban)
summary(guild_model) # need to use urbanization and metals as predictors once we have them, not 'location'
# download traits metadata
traits_meta <- read_csv("https://github.com/traitecoevo/fungaltraits/releases/download/v0.0.3/funtothefun.csv")
# download FungalTraits database
traits_db <- fungaltraits::fungal_traits()
names(traits_db$species)
traits_db$species
# match taxa at genus level
genera <- ps@tax_table[,6] %>% str_remove("^g__")
species <- ps@tax_table[,7] %>% str_remove("^s__")
fungal_traits <-
data.frame(Genus=genera) %>%
mutate(species=paste(Genus,species,sep="_")) %>%
left_join(traits_db,by=c("species","Genus"),multiple='all')
fungal_traits
traits_db
genera
data.frame(Genus=genera) %>%
mutate(species=paste(Genus,species,sep="_"))
data.frame(Genus=genera) %>%
mutate(species=paste(Genus,species,sep="_")) %>%
left_join(traits_db,by=c("species","Genus"),multiple='all')
View(fungal_traits)
# need to condense/remove multiple matches
fungal_traits %>%
dplyr::filter(species != "NA_NA")
# remove traits not associated with biochem functional potential
traits_to_ignore <- c(
"redChannel_mean","redChannel_sd","RNAHelicase_count","RNApolymerase_count","spore_length",
"spore_size","spore_width","sporocarp_chitin","sporocarp_N","sporocarp_protein","sporocarp_resp",
"taxonomic_level_fg","tissue_c","tissue_cn","tissue_cp","tissue_n","tissue_np","tissue_p","total_genes",
"trehalase_count","latitude","map","greenChannel_mean","greenChannel_sd","heatShockProtein_count",
"extension_rate","fruiting_body_size","mat","longitude","melanin_content","melanin_count",
"coldShockProtein_count","dsDNA","blueChannel_mean","blueChannel_sd","ifungorum_number",
"sterol_type","studyName","substrate","trait_fg","trophic_mode_fg",'notes_fg',"source_funguild_fg",
"growth_form_fg","guild_fg","higher_clade","culture_media","culture_notes","elevation","em_expl",
"em_text","colour_mean","confidence_fg","ascoma_development","ascoma_type","ascus_dehiscence",
"uuid","obj_id","speciesMatched"
)
# group by species; summarize to find mean values with na.omit=TRUE
summarized_traits <-
fungal_traits %>%
dplyr::select(-all_of(traits_to_ignore)) %>%
dplyr::group_by(species) %>%
summarize(across(where(is.numeric),function(x){mean(x,na.rm=TRUE)}))
names(summarized_traits)
summarized_traits
traits <-
data.frame(Genus=genera) %>%
mutate(species=paste(Genus,species,sep="_")) %>%
left_join(summarized_traits,by=c("species"))
View(traits)
remotes::install_github("FranzKrah/rmycobank")
library(rmycobank)
rmycobank::syno_mycobank("Aspergillus")
library(XML)
library(stringr)
rmycobank::syno_mycobank("Aspergillus")
rmycobank::syno_mycobank("Aspergillus niger")
library(tidyverse); packageVersion("tidyverse")
library(phyloseq); packageVersion("phyloseq")
library(broom)
library(readxl)
library(corncob)
library(microbiome)
library(ecodist)
library(ggmap); packageVersion("ggmap")
library(FUNGuildR)
library(fungaltraits)
source("./R/bbdml_helper.R")
source("./R/googlemap_styling.R")
source("./R/palettes.R")
set.seed(666)
# Load google maps API key from .Renviron
ggmap::register_google(key = Sys.getenv("APIKEY")) # Key kept private
readRenviron("~/.Renviron")
Sys.getenv("APIKEY")
options(warn = 1)
source("./R/plot_bar2.R")
set.seed(666)
ps <- readRDS("./output/ps_not-cleaned_no-metadata.RDS")
# add lat/lon metadata
meta <- read_xlsx("./metadata/aquatic-plant-proj-metadata.xlsx") %>%
mutate(sampleid = paste0("JM_",site_ID)) %>%
dplyr::filter(sampleid %in% ps@sam_data$sampleid) %>%
mutate(lat=lat %>% str_remove("_N") %>% as.numeric(),
lon=lon %>% str_remove("_W") %>% as.numeric())
sam <-
sample_data(
full_join(
microbiome::meta(ps),
meta
)
)
sample_names(sam) <- meta$sampleid
ps <- phyloseq(sam,otu_table(ps),tax_table(ps))
# clean up taxa
# keep only unambiguous fungi
ps <-
ps %>%
subset_taxa(Kingdom == "k__Fungi") %>%
subset_taxa(!is.na(Phylum))
# convert location to factor and numeric
ps@sam_data$location2 <- factor(ps@sam_data$location,
levels = as.character(c(1,2,3,4,5,6,9,10,7,8))) # actual river position order (downstream)
ps@sam_data$location <- ps@sam_data$location %>% as.numeric()
# export table of taxonomy and total read counts
data.frame(taxonomy=unname(corncob::otu_to_taxonomy(taxa_names(ps),ps)),
total_reads=unname(taxa_sums(ps))) %>%
write_csv("./output/taxonomy_counts.csv")
mapstyle <- rjson::fromJSON(file = "./R/mapstyle3.json") %>% # from JSON file exported from snazzymaps.com
googlemap_json_to_string(.)
area <-
ggmap::get_googlemap(center = c(lon = ps@sam_data$lon %>% mean,
lat = ps@sam_data$lat %>% mean),
zoom = 12,
scale = 2,
style=mapstyle)
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.75)
library(tidyverse); packageVersion("tidyverse")
library(phyloseq); packageVersion("phyloseq")
library(broom)
library(readxl)
library(corncob)
library(microbiome)
library(ecodist)
library(ggmap); packageVersion("ggmap")
library(FUNGuildR)
library(fungaltraits)
source("./R/bbdml_helper.R")
source("./R/googlemap_styling.R")
source("./R/palettes.R")
set.seed(666)
# Load google maps API key from .Renviron
ggmap::register_google(key = Sys.getenv("APIKEY")) # Key kept private
readRenviron("~/.Renviron")
options(warn = 1)
source("./R/plot_bar2.R")
set.seed(666)
# Load clean ps object ####
ps <- readRDS("./output/ps_not-cleaned_no-metadata.RDS")
# add lat/lon metadata
meta <- read_xlsx("./metadata/aquatic-plant-proj-metadata.xlsx") %>%
mutate(sampleid = paste0("JM_",site_ID)) %>%
dplyr::filter(sampleid %in% ps@sam_data$sampleid) %>%
mutate(lat=lat %>% str_remove("_N") %>% as.numeric(),
lon=lon %>% str_remove("_W") %>% as.numeric())
sam <-
sample_data(
full_join(
microbiome::meta(ps),
meta
)
)
sample_names(sam) <- meta$sampleid
ps <- phyloseq(sam,otu_table(ps),tax_table(ps))
# clean up taxa
# keep only unambiguous fungi
ps <-
ps %>%
subset_taxa(Kingdom == "k__Fungi") %>%
subset_taxa(!is.na(Phylum))
# convert location to factor and numeric
ps@sam_data$location2 <- factor(ps@sam_data$location,
levels = as.character(c(1,2,3,4,5,6,9,10,7,8))) # actual river position order (downstream)
ps@sam_data$location <- ps@sam_data$location %>% as.numeric()
# export table of taxonomy and total read counts
data.frame(taxonomy=unname(corncob::otu_to_taxonomy(taxa_names(ps),ps)),
total_reads=unname(taxa_sums(ps))) %>%
write_csv("./output/taxonomy_counts.csv")
# Alpha diversity ####
diversity <- estimate_richness(ps,measures = c("Observed","Shannon")) %>%
mutate(location = ps@sam_data$location)
plot_richness(ps,measures = c("Observed"),x = "location2") +
geom_boxplot(fill="#4d6059") +
labs(y="Fungal richness",x="Downstream position") +
theme_bw() +
theme(strip.text = element_blank()) +
scale_x_discrete(labels=as.character(1:10)) +
geom_vline(xintercept = 5.5,linetype=2,color='red') +
annotate('text',label="Edge of 'urban zone'",x=7,y=75)
ggsave("./output/figs/ASV_Richness.png",height = 4, width = 8,dpi=300)
ps@sam_data %>%
data.frame() %>%
ggplot(aes(x=lon,y=lat)) +
geom_point()
# model alpha diversity
richness_mod <- diversity %>%
mutate(location=as.character(location) %>% as.numeric) %>%
glm(data=., formula = Observed ~ location)
summary(richness_mod)
tidy(richness_mod) %>%
kableExtra::kable() %>%
kableExtra::kable_classic()
# which taxa are dropping out as urbanization increases?
# do this in relative abundance
ps_ra <-
ps %>%
transform_sample_counts(function(x){x/sum(x)})
sample_sums(ps_ra)
diversity %>%
mutate(location2=as.character(location) %>% as.numeric()) %>%
ggplot(aes(x=Observed,y=Shannon)) +
geom_point() +
geom_smooth(method='lm')
plot_richness(ps_ra,measures = c("Shannon"),x = "location2") +
geom_boxplot() +
labs(y="Species Richness",x="Location") +
theme_bw() +
theme(strip.text = element_blank())
diversity %>%
mutate(lat=ps_ra@sam_data$lat,lon=ps_ra@sam_data$lon) %>%
mutate(location2=as.character(location) %>% as.numeric()) %>%
ggplot(aes(x=lat,y=lon,color=Observed)) +
geom_point(alpha=.5,size=4) +
scale_color_viridis_c() +
theme_bw()
# Multiple regression on matrices
gps_dist <- vegan::vegdist(microbiome::meta(ps_ra) %>% select(lat,lon),
method = "euclidean")
asv_dist <- vegan::vegdist(otu_table(ps_ra),method = "bray")
mrm <- MRM(asv_dist ~ gps_dist)
data.frame(mrm) %>%
write_csv("./output/MRM_stats_table.csv")
plot_bar2(ps_ra,fill="Phylum") +
scale_fill_viridis_d()
ggsave("./output/figs/stacked_barchart_Phylum.png",dpi=300,height = 4,width = 4)
# Map of sites ####
meta <- microbiome::meta(ps)
mapstyle <- rjson::fromJSON(file = "./R/mapstyle3.json") %>% # from JSON file exported from snazzymaps.com
googlemap_json_to_string(.)
area <-
ggmap::get_googlemap(center = c(lon = ps@sam_data$lon %>% mean,
lat = ps@sam_data$lat %>% mean),
zoom = 12,
scale = 2,
style=mapstyle)
meta$location
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.75)
ggmap::ggmap(area)
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) +
geom_label(data=meta,aes(x=lon,y=lat,label=location),color='darkorange',size=4,alpha=.75)
ggmap::ggmap(area) +
geom_point(data=meta,aes(x=lon,y=lat),color='darkorange',size=4,alpha=.75) #+
library(mycobank)
library(tidyverse)
db <- get_mycobank_db()
taxa <- c("Amanita caesarea",
"Octospora bridei",
"Amphisphaeria neoaquatica",
"Thelonectria lucida",
"NonsEnSe NaMe")
x <- mycobank::get_mycobank_synonyms(taxa, db)
x
x$current_name
x <- db
syns <- mycobank::get_mycobank_synonyms(taxa,db)
syns$current_name
class(db)
stopifnot("data.frame" %in% class(dbf))
syns$obligate_synonym
syns$taxonomic_synonyms
