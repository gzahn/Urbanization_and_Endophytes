glm(data = meta,
formula = pathogen_step$formula)
summary(pathogen_mod)
### Save model objects ####
mod_objects <- c("gamma_div_mod",
"shannon_div_mod",
"uniquetaxa_mod",
"raretaxa_mod",
"permanova_mod",
"mutualist_mod",
"pathogen_mod")
for(i in mod_objects){
fn <- paste0("./output/models/",i,".RDS")
saveRDS(object = get(i),file = fn)
}
# Differential abundance ####
# quick and dirty diffabund analysis
# This should use categorical Urban/Non-Urban predictor!
# Define that based on watershed data #
ps_meta@sam_data %>% names
da_analysis_hi_devel <- differentialTest(formula = ~ high_develop_cat, #abundance
phi.formula = ~ 1, #dispersion
formula_null = ~ 1, #mean
phi.formula_null = ~ 1,
test = "Wald", boot = FALSE,
data = ps_meta,
fdr_cutoff = 0.05,
full_output = TRUE)
da_analysis_hi_devel$significant_taxa
bbdml_hi_devel <- multi_bbdml(da_analysis_hi_devel,ps_meta,"high_develop_cat","high_develop_cat")
plot_multi_bbdml(bbdml_hi_devel,color = "high_develop_cat")
saveRDS(bbdml_plot_1,"./output/figs/diffabund_plot_high_development_categorical.RDS")
# check this taxon for more current names
taxon <-
otu_to_taxonomy(da_analysis_hi_devel$significant_taxa,ps) %>%
str_split("g__") %>% map_chr(2) %>% str_replace("_s__"," ")
mb_db <- mycobank::get_mycobank_db()
site.unique.taxa <- list()
for(i in 10:1){
x <- ps %>%
subset_samples(location == i)
x <- x %>%
subset_taxa(taxa_sums(x) > 0)
site.unique.taxa[[paste0("location_",as.character(i))]] <- taxa_names(x)
}
site.unique.taxa$location_1
grouplist <- list()
for( i in 10:1){
groupname <- paste0(i," - 1")
grouplist[[groupname]]  <- site.unique.taxa[1:i] %>% unlist %>% unique
# purrr::reduce(unique)
}
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed") +
scale_fill_viridis_d(end=.8)
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed", fill="Position") +
scale_fill_viridis_d(end=.8)
ggsave("./output/figs/n_unique_taxa_upstream_and_downstream.png", width = 8, height = 6, dpi=300)
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed", fill="Position") +
scale_fill_viridis_d(end=.8) +
theme(axis.title = element_text(face='bold',size=14),
legend.title = element_text(face='bold',size=14))
ggsave("./output/figs/n_unique_taxa_upstream_and_downstream.png", width = 8, height = 6, dpi=300)
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed", fill="Position") +
scale_fill_viridis_d(end=.8) +
theme(axis.title = element_text(face='bold',size=14),
legend.title = element_text(face='bold',size=14),
axis.text = element_text(face='bold',size=10))
ggsave("./output/figs/n_unique_taxa_upstream_and_downstream.png", width = 8, height = 6, dpi=300)
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed", fill="Position") +
scale_fill_viridis_d(end=.8) +
theme(axis.title = element_text(face='bold',size=14),
legend.title = element_text(face='bold',size=14),
axis.text = element_text(face='bold',size=10),
legend.text = element_text(face='bold',size=12))
ggsave("./output/figs/n_unique_taxa_upstream_and_downstream.png", width = 8, height = 6, dpi=300)
p <-
data.frame(downstream_position = 1:10,
total_taxa_downstream =
grouplist %>% map_dbl(length)) %>%
mutate(total_taxa_upstream = max(total_taxa_downstream) - total_taxa_downstream) %>%
pivot_longer(starts_with("total_"),names_to = "position", values_to = "n_unique_taxa",
names_prefix = "total_taxa_") %>%
mutate(downstream_position = factor(downstream_position, levels = as.character(1:10))) %>%
ggplot(aes(x=downstream_position,y=n_unique_taxa/max(n_unique_taxa),fill=position)) +
geom_col() +
theme_bw() +
labs(x="Location",y="Proportion of taxa unique\n to cumulative watershed", fill="Position") +
scale_fill_viridis_d(end=.8) +
theme(axis.title = element_text(face='bold',size=14),
legend.title = element_text(face='bold',size=14),
axis.text = element_text(face='bold',size=10),
legend.text = element_text(face='bold',size=12))
p
saveRDS(p,"./output/figs/n_unique_taxa_upstream_and_downstream.RDS")
## Setup ####
library(tidyverse)
library(patchwork)
library(broom)
### Load models ####
model_paths <- list.files("./output/models",full.names = TRUE, pattern = ".RDS")
for(i in model_paths){
mod_name <- i %>% basename() %>% str_remove(".RDS")
assign(mod_name,readRDS(i),envir = .GlobalEnv)
}
### Load metadata ####
meta <- readRDS("./output/cleaned_full_metadata.RDS")
### Load plots ####
diffabund_plot <- readRDS("./output/figs/diffabund_plot_high_development_categorical.RDS")
fig.paths <- list.files(pattern = "png",full.names = TRUE,recursive = TRUE)
richness_mod <- gamma_div_mod
raretaxa_mod
shannon_div_mod
options(scipen = 999)
kb <- broom::tidy(raretaxa_mod) %>% mutate(outcome="Rare taxa") %>%
full_join(broom::tidy(richness_mod) %>% mutate(outcome="Richness")) %>%
full_join(broom::tidy(shannon_div_mod) %>% mutate(outcome="Shannon div.")) %>%
mutate(across(where(is.numeric),function(x){round(x,2)})) %>%
mutate(p.value = kableExtra::cell_spec(p.value, bold = ifelse(p.value < 0.05,TRUE,FALSE))) %>%
kableExtra::kable(escape = FALSE) %>%
kableExtra::kable_classic() %>%
kableExtra::row_spec(0,bold=TRUE)
kb
kableExtra::save_kable(kb,file = "./output/models/models_outputs_kable_table.png")
model_paths
ls(pattern = "_mod$")
for(i in ls(pattern = "_mod$")){
x <- get(i)
print(formula(x))
}
permanova_mod
pathogen_mod
ls(pattern = "_mod$")
gamma_div_mod
gamma_div_mod %>% summary
print("gamma_diversity");gamma_div_mod %>% summary
print("gamma_diversity");gamma_div_mod %>% formula
print("gamma_diversity");gamma_div_mod %>% formula;gamma_div_mod %>% summary
print("mutualist_mod");mutualist_mod %>% formula;mutualist_mod %>% summary
print("permanova_mod");permanova_mod
print("raretaxa_mod");raretaxa_mod %>% formula;raretaxa_mod %>% summary
print("richness_mod");richness_mod %>% formula;richness_mod %>% summary
sink("./output/models/model_specifications.txt")
print("gamma_diversity");gamma_div_mod %>% formula;gamma_div_mod %>% summary
print("mutualist_mod");mutualist_mod %>% formula;mutualist_mod %>% summary
print("pathogen_mod");pathogen_mod %>% formula;pathogen_mod %>% summary
print("permanova_mod");permanova_mod
print("raretaxa_mod");raretaxa_mod %>% formula;raretaxa_mod %>% summary
print("richness_mod");richness_mod %>% formula;richness_mod %>% summary
print("shannon_div_mod");shannon_div_mod %>% formula;shannon_div_mod %>% summary
print("uniquetaxa_mod");uniquetaxa_mod %>% formula;uniquetaxa_mod %>% summary
sink(NULL)
# core taxa
microbiome::core_members(ps)
saveRDS(ps,"./output/ps_cleaned.RDS")
# core taxa
ps <- readRDS("./output/ps_cleaned.RDS")
microbiome::core_members(ps)
microbiome::core_members
microbiome::core_members(ps,detection = .1, prevalence = .5)
microbiome::core_members(ps,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy()
microbiome::core_members(ps,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=ps)
ps@sam_data$location
rural <- ps %>% subset_samples(location < 5)
urban <- ps %>% subset_samples(location > 4)
microbiome::core_members(rural,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=rural)
rural
microbiome::core_members(urban,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=urban)
microbiome::core_members(rural,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=rural) %>% unname
microbiome::core_members(urban,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=urban) %>% unname
rural_core <- microbiome::core_members(rural,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=rural)
urban_core <- microbiome::core_members(urban,detection = .1, prevalence = .5) %>% corncob::otu_to_taxonomy(data=urban)
names(rural_core)
names(urban_core)
names(rural_core) %in%
names(urban_core)
names(urban_core) %in% names(rural_core)
c(names(rural_core) %in% names(urban_core),names(urban_core) %in% names(rural_core))
c(names(rural_core),names(urban_core))
c(names(rural_core),names(urban_core)) %>% duplicated
taxa_names(rural)
taxa_names(urban)
rural
rural <- rural %>% subset_taxa(taxa_sums(rural) > 0)
rural
urban <- urban %>% subset_taxa(taxa_sums(urban) > 0)
urban
taxa_names(rural) %in% taxa_names(urban)
taxa_names(rural) %in% taxa_names(urban) %>% sum
taxa_names(urban) %in% taxa_names(rural) %>% sum
shared_taxa_count <- taxa_names(rural) %in% taxa_names(urban) %>% sum
'%ni%' <- Negate("%in%")
taxa_names(rural)) %ni% taxa_names(urban)
taxa_names(rural) %ni% taxa_names(urban)
taxa_names(rural) %ni% taxa_names(urban) %>% sum
rural
rural_only_taxa_count <- taxa_names(rural) %ni% taxa_names(urban) %>% sum
urban_only_taxa_count <- taxa_names(urban) %ni% taxa_names(rural) %>% sum
urban_only_taxa_count
urban
?VennDiagram::venn.diagram()
install.packages("venneuler")
VennDiagram::venn.diagram(list(rural_only_taxa_count,urban_only_taxa_count,shared_taxa_count))
VennDiagram::venn.diagram(list(rural_only_taxa_count,urban_only_taxa_count,shared_taxa_count),
filename = "./output/figs/venn_diagram_taxa_counts.tiff")
venn.plot <- venn.diagram(
x = list(
"A" = 1:100,
"B" = 96:140
),
filename = tempfile(
pattern = 'Venn_2set_complex',
fileext = '.tiff'
),
scaled = TRUE,
ext.text = TRUE,
ext.line.lwd = 2,
ext.dist = -0.15,
ext.length = 0.9,
ext.pos = -4,
inverted = TRUE,
cex = 2.5,
cat.cex = 2.5,
rotation.degree = 45,
main = "Complex Venn Diagram",
sub = "Featuring: rotation and external lines",
main.cex = 2,
sub.cex = 1
)
library(VennDiagram)
venn.plot <- venn.diagram(
x = list(
"A" = 1:100,
"B" = 96:140
),
filename = tempfile(
pattern = 'Venn_2set_complex',
fileext = '.tiff'
),
scaled = TRUE,
ext.text = TRUE,
ext.line.lwd = 2,
ext.dist = -0.15,
ext.length = 0.9,
ext.pos = -4,
inverted = TRUE,
cex = 2.5,
cat.cex = 2.5,
rotation.degree = 45,
main = "Complex Venn Diagram",
sub = "Featuring: rotation and external lines",
main.cex = 2,
sub.cex = 1
)
venn.plot
getwd()
venn.plot <- venn.diagram(
x = list(
"A" = 1:100,
"B" = 96:140
),
filename = "test.tiff",
scaled = TRUE,
ext.text = TRUE,
ext.line.lwd = 2,
ext.dist = -0.15,
ext.length = 0.9,
ext.pos = -4,
inverted = TRUE,
cex = 2.5,
cat.cex = 2.5,
rotation.degree = 45,
main = "Complex Venn Diagram",
sub = "Featuring: rotation and external lines",
main.cex = 2,
sub.cex = 1
)
taxa_names(rural)
set1 <- taxa_names(rural)
set2 <- taxa_names(urban)
venn.diagram(
x = list(set1,se2)
)
venn.diagram(
x = list(set1,se2),
filename = "test.tiff"
)
venn.diagram(
x = list(set1,set2),
filename = "test.tiff"
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff"
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 4,
width = 4
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 600,
width = 600
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 1200,
width = 1200
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,cat.cex=.6
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
rotation = 1
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans"
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27),
cat.dist = c(0.055, 0.055),
cat.fontfamily = "sans"
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27),
cat.dist = c(0.055, 0.055),
cat.fontfamily = "sans",
cex=2,fontface='bold'
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27),
cat.dist = c(0.055, 0.055),
cat.fontfamily = "sans",
cex=1.5,fontface='bold'
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "test.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27),
cat.dist = c(0.055, 0.055),
cat.fontfamily = "sans",
cex=1.5,fontface='bold',
fill = c("darkblue","darkorange")
)
venn.diagram(
x = list(set1,set2),
category.names = c("Rural sites","Urban sites"),
filename = "./output/figs/venn_diagram.tiff",
output = TRUE,
height = 6,
width = 6,units = "in",resolution = 400,imagetype = 'tiff',disable.logging = TRUE,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27),
cat.dist = c(0.055, 0.055),
cat.fontfamily = "sans",
cex=1.5,fontface='bold',
fill = c("darkblue","darkorange")
)
# Make figures and tables for manuscript ####
## Setup ####
library(tidyverse)
library(patchwork)
library(broom)
library(VennDiagram)
'%ni%' <- Negate("%in%")
### Load models ####
model_paths <- list.files("./output/models",full.names = TRUE, pattern = ".RDS")
for(i in model_paths){
mod_name <- i %>% basename() %>% str_remove(".RDS")
assign(mod_name,readRDS(i),envir = .GlobalEnv)
}
for(i in ls(pattern = "_mod$")){
x <- get(i)
print(formula(x))
}
sink("./output/models/model_specifications.txt")
print("gamma_diversity");gamma_div_mod %>% formula;gamma_div_mod %>% summary
print("mutualist_mod");mutualist_mod %>% formula;mutualist_mod %>% summary
print("pathogen_mod");pathogen_mod %>% formula;pathogen_mod %>% summary
print("permanova_mod");permanova_mod
print("raretaxa_mod");raretaxa_mod %>% formula;raretaxa_mod %>% summary
print("richness_mod");richness_mod %>% formula;richness_mod %>% summary
### Load models ####
model_paths <- list.files("./output/models",full.names = TRUE, pattern = ".RDS")
model_paths
model_paths
for(i in model_paths){
mod_name <- i %>% basename() %>% str_remove(".RDS")
assign(mod_name,readRDS(i),envir = .GlobalEnv)
}
model_paths
for(i in ls(pattern = "_mod$")){
x <- get(i)
print(formula(x))
}
